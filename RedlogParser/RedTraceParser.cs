//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/andrew/RiderProjects/adt-solver/RedlogParser/RedTrace.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RedTraceParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, AND=4, OR=5, EQUAL=6, GR=7, LS=8, LEQ=9, NEQ=10, 
		GEQ=11, NCONG=12, BALL=13, NIL=14, PREAMBULA=15, POSTAMBULA=16, ID=17, 
		NUM=18, WS=19;
	public const int
		RULE_prog = 0, RULE_expr = 1, RULE_body = 2, RULE_mul = 3, RULE_ncgong = 4, 
		RULE_factor = 5, RULE_power = 6, RULE_num = 7, RULE_number = 8, RULE_id = 9, 
		RULE_and = 10, RULE_or = 11, RULE_equal = 12, RULE_gr = 13, RULE_ls = 14, 
		RULE_neq = 15, RULE_leq = 16, RULE_geq = 17, RULE_ball = 18, RULE_nil = 19;
	public static readonly string[] ruleNames = {
		"prog", "expr", "body", "mul", "ncgong", "factor", "power", "num", "number", 
		"id", "and", "or", "equal", "gr", "ls", "neq", "leq", "geq", "ball", "nil"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'and'", "'or'", "'equal'", "'greaterp'", "'lessp'", 
		"'leq'", "'neq'", "'geq'", "'ncong'", "'ball'", "'nil'", "'(!*fof (pasf)'", 
		"'t)'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "AND", "OR", "EQUAL", "GR", "LS", "LEQ", "NEQ", 
		"GEQ", "NCONG", "BALL", "NIL", "PREAMBULA", "POSTAMBULA", "ID", "NUM", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RedTrace.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RedTraceParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RedTraceParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RedTraceParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREAMBULA() { return GetToken(RedTraceParser.PREAMBULA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTAMBULA() { return GetToken(RedTraceParser.POSTAMBULA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RedTraceParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(PREAMBULA);
			State = 41;
			expr();
			State = 42;
			Match(POSTAMBULA);
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndContext and() {
			return GetRuleContext<AndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrContext or() {
			return GetRuleContext<OrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcgongContext ncgong() {
			return GetRuleContext<NcgongContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NilContext nil() {
			return GetRuleContext<NilContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrContext gr() {
			return GetRuleContext<GrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LsContext ls() {
			return GetRuleContext<LsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NeqContext neq() {
			return GetRuleContext<NeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeqContext leq() {
			return GetRuleContext<LeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeqContext geq() {
			return GetRuleContext<GeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BallContext ball() {
			return GetRuleContext<BallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		int _la;
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				Match(T__0);
				State = 46;
				and();
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 47;
					expr();
					}
					}
					State = 50;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__0 );
				State = 52;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				Match(T__0);
				State = 55;
				or();
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 56;
					expr();
					}
					}
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__0 );
				State = 61;
				Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				Match(T__0);
				State = 64;
				ncgong();
				State = 65;
				body();
				State = 66;
				nil();
				State = 67;
				Match(T__1);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				Match(T__0);
				State = 70;
				equal();
				State = 71;
				body();
				State = 72;
				nil();
				State = 73;
				Match(T__1);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 75;
				Match(T__0);
				State = 76;
				gr();
				State = 77;
				body();
				State = 78;
				nil();
				State = 79;
				Match(T__1);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 81;
				Match(T__0);
				State = 82;
				ls();
				State = 83;
				body();
				State = 84;
				nil();
				State = 85;
				Match(T__1);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 87;
				Match(T__0);
				State = 88;
				neq();
				State = 89;
				body();
				State = 90;
				nil();
				State = 91;
				Match(T__1);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 93;
				Match(T__0);
				State = 94;
				leq();
				State = 95;
				body();
				State = 96;
				nil();
				State = 97;
				Match(T__1);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 99;
				Match(T__0);
				State = 100;
				geq();
				State = 101;
				body();
				State = 102;
				nil();
				State = 103;
				Match(T__1);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 105;
				Match(T__0);
				State = 106;
				ball();
				State = 107;
				id();
				State = 108;
				expr();
				State = 109;
				expr();
				State = 110;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext[] mul() {
			return GetRuleContexts<MulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext mul(int i) {
			return GetRuleContext<MulContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(T__0);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 121;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 115;
					factor();
					}
					break;
				case 2:
					{
					State = 116;
					num();
					}
					break;
				case 3:
					{
					State = 117;
					Match(T__0);
					State = 118;
					mul();
					State = 119;
					Match(T__1);
					}
					break;
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__2 );
			State = 125;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext[] mul() {
			return GetRuleContexts<MulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext mul(int i) {
			return GetRuleContext<MulContext>(i);
		}
		public MulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulContext mul() {
		MulContext _localctx = new MulContext(Context, State);
		EnterRule(_localctx, 6, RULE_mul);
		int _la;
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				factor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				power();
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 135;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 129;
						factor();
						}
						break;
					case 2:
						{
						State = 130;
						num();
						}
						break;
					case 3:
						{
						State = 131;
						Match(T__0);
						State = 132;
						mul();
						State = 133;
						Match(T__1);
						}
						break;
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__0 || _la==T__2 );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NcgongContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCONG() { return GetToken(RedTraceParser.NCONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext[] mul() {
			return GetRuleContexts<MulContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulContext mul(int i) {
			return GetRuleContext<MulContext>(i);
		}
		public NcgongContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ncgong; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterNcgong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitNcgong(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNcgong(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NcgongContext ncgong() {
		NcgongContext _localctx = new NcgongContext(Context, State);
		EnterRule(_localctx, 8, RULE_ncgong);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__0);
			State = 142;
			Match(NCONG);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 149;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 143;
					factor();
					}
					break;
				case 2:
					{
					State = 144;
					num();
					}
					break;
				case 3:
					{
					State = 145;
					Match(T__0);
					State = 146;
					mul();
					State = 147;
					Match(T__1);
					}
					break;
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==T__2 );
			State = 153;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 10, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			Match(T__0);
			State = 156;
			power();
			State = 157;
			Match(T__2);
			State = 158;
			number();
			State = 159;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 12, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(T__0);
			State = 162;
			id();
			State = 163;
			Match(T__2);
			State = 164;
			number();
			State = 165;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 14, RULE_num);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(T__2);
			State = 168;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(RedTraceParser.NUM, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 16, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(RedTraceParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 18, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(RedTraceParser.AND, 0); }
		public AndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndContext and() {
		AndContext _localctx = new AndContext(Context, State);
		EnterRule(_localctx, 20, RULE_and);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(RedTraceParser.OR, 0); }
		public OrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrContext or() {
		OrContext _localctx = new OrContext(Context, State);
		EnterRule(_localctx, 22, RULE_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(RedTraceParser.EQUAL, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqual(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 24, RULE_equal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GR() { return GetToken(RedTraceParser.GR, 0); }
		public GrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterGr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitGr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrContext gr() {
		GrContext _localctx = new GrContext(Context, State);
		EnterRule(_localctx, 26, RULE_gr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			Match(GR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LS() { return GetToken(RedTraceParser.LS, 0); }
		public LsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ls; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterLs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitLs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsContext ls() {
		LsContext _localctx = new LsContext(Context, State);
		EnterRule(_localctx, 28, RULE_ls);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(LS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(RedTraceParser.NEQ, 0); }
		public NeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_neq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitNeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NeqContext neq() {
		NeqContext _localctx = new NeqContext(Context, State);
		EnterRule(_localctx, 30, RULE_neq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(NEQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEQ() { return GetToken(RedTraceParser.LEQ, 0); }
		public LeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterLeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitLeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeqContext leq() {
		LeqContext _localctx = new LeqContext(Context, State);
		EnterRule(_localctx, 32, RULE_leq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(LEQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEQ() { return GetToken(RedTraceParser.GEQ, 0); }
		public GeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterGeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitGeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeqContext geq() {
		GeqContext _localctx = new GeqContext(Context, State);
		EnterRule(_localctx, 34, RULE_geq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(GEQ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BALL() { return GetToken(RedTraceParser.BALL, 0); }
		public BallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ball; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterBall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitBall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BallContext ball() {
		BallContext _localctx = new BallContext(Context, State);
		EnterRule(_localctx, 36, RULE_ball);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(BALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NilContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(RedTraceParser.NIL, 0); }
		public NilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nil; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.EnterNil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedTraceListener typedListener = listener as IRedTraceListener;
			if (typedListener != null) typedListener.ExitNil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRedTraceVisitor<TResult> typedVisitor = visitor as IRedTraceVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NilContext nil() {
		NilContext _localctx = new NilContext(Context, State);
		EnterRule(_localctx, 38, RULE_nil);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(NIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,195,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,1,0,
		1,1,1,1,1,1,4,1,49,8,1,11,1,12,1,50,1,1,1,1,1,1,1,1,1,1,4,1,58,8,1,11,
		1,12,1,59,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,3,1,113,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,122,8,2,11,2,12,2,123,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,4,3,136,8,3,11,3,12,3,137,3,3,
		140,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,150,8,4,11,4,12,4,151,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,
		8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,0,0,20,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,0,0,195,0,40,1,0,0,0,2,112,1,0,0,0,
		4,114,1,0,0,0,6,139,1,0,0,0,8,141,1,0,0,0,10,155,1,0,0,0,12,161,1,0,0,
		0,14,167,1,0,0,0,16,170,1,0,0,0,18,172,1,0,0,0,20,174,1,0,0,0,22,176,1,
		0,0,0,24,178,1,0,0,0,26,180,1,0,0,0,28,182,1,0,0,0,30,184,1,0,0,0,32,186,
		1,0,0,0,34,188,1,0,0,0,36,190,1,0,0,0,38,192,1,0,0,0,40,41,5,15,0,0,41,
		42,3,2,1,0,42,43,5,16,0,0,43,44,5,0,0,1,44,1,1,0,0,0,45,46,5,1,0,0,46,
		48,3,20,10,0,47,49,3,2,1,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,50,
		51,1,0,0,0,51,52,1,0,0,0,52,53,5,2,0,0,53,113,1,0,0,0,54,55,5,1,0,0,55,
		57,3,22,11,0,56,58,3,2,1,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,
		60,1,0,0,0,60,61,1,0,0,0,61,62,5,2,0,0,62,113,1,0,0,0,63,64,5,1,0,0,64,
		65,3,8,4,0,65,66,3,4,2,0,66,67,3,38,19,0,67,68,5,2,0,0,68,113,1,0,0,0,
		69,70,5,1,0,0,70,71,3,24,12,0,71,72,3,4,2,0,72,73,3,38,19,0,73,74,5,2,
		0,0,74,113,1,0,0,0,75,76,5,1,0,0,76,77,3,26,13,0,77,78,3,4,2,0,78,79,3,
		38,19,0,79,80,5,2,0,0,80,113,1,0,0,0,81,82,5,1,0,0,82,83,3,28,14,0,83,
		84,3,4,2,0,84,85,3,38,19,0,85,86,5,2,0,0,86,113,1,0,0,0,87,88,5,1,0,0,
		88,89,3,30,15,0,89,90,3,4,2,0,90,91,3,38,19,0,91,92,5,2,0,0,92,113,1,0,
		0,0,93,94,5,1,0,0,94,95,3,32,16,0,95,96,3,4,2,0,96,97,3,38,19,0,97,98,
		5,2,0,0,98,113,1,0,0,0,99,100,5,1,0,0,100,101,3,34,17,0,101,102,3,4,2,
		0,102,103,3,38,19,0,103,104,5,2,0,0,104,113,1,0,0,0,105,106,5,1,0,0,106,
		107,3,36,18,0,107,108,3,18,9,0,108,109,3,2,1,0,109,110,3,2,1,0,110,111,
		5,2,0,0,111,113,1,0,0,0,112,45,1,0,0,0,112,54,1,0,0,0,112,63,1,0,0,0,112,
		69,1,0,0,0,112,75,1,0,0,0,112,81,1,0,0,0,112,87,1,0,0,0,112,93,1,0,0,0,
		112,99,1,0,0,0,112,105,1,0,0,0,113,3,1,0,0,0,114,121,5,1,0,0,115,122,3,
		10,5,0,116,122,3,14,7,0,117,118,5,1,0,0,118,119,3,6,3,0,119,120,5,2,0,
		0,120,122,1,0,0,0,121,115,1,0,0,0,121,116,1,0,0,0,121,117,1,0,0,0,122,
		123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,126,5,
		2,0,0,126,5,1,0,0,0,127,140,3,10,5,0,128,135,3,12,6,0,129,136,3,10,5,0,
		130,136,3,14,7,0,131,132,5,1,0,0,132,133,3,6,3,0,133,134,5,2,0,0,134,136,
		1,0,0,0,135,129,1,0,0,0,135,130,1,0,0,0,135,131,1,0,0,0,136,137,1,0,0,
		0,137,135,1,0,0,0,137,138,1,0,0,0,138,140,1,0,0,0,139,127,1,0,0,0,139,
		128,1,0,0,0,140,7,1,0,0,0,141,142,5,1,0,0,142,149,5,12,0,0,143,150,3,10,
		5,0,144,150,3,14,7,0,145,146,5,1,0,0,146,147,3,6,3,0,147,148,5,2,0,0,148,
		150,1,0,0,0,149,143,1,0,0,0,149,144,1,0,0,0,149,145,1,0,0,0,150,151,1,
		0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,5,2,0,0,
		154,9,1,0,0,0,155,156,5,1,0,0,156,157,3,12,6,0,157,158,5,3,0,0,158,159,
		3,16,8,0,159,160,5,2,0,0,160,11,1,0,0,0,161,162,5,1,0,0,162,163,3,18,9,
		0,163,164,5,3,0,0,164,165,3,16,8,0,165,166,5,2,0,0,166,13,1,0,0,0,167,
		168,5,3,0,0,168,169,3,16,8,0,169,15,1,0,0,0,170,171,5,18,0,0,171,17,1,
		0,0,0,172,173,5,17,0,0,173,19,1,0,0,0,174,175,5,4,0,0,175,21,1,0,0,0,176,
		177,5,5,0,0,177,23,1,0,0,0,178,179,5,6,0,0,179,25,1,0,0,0,180,181,5,7,
		0,0,181,27,1,0,0,0,182,183,5,8,0,0,183,29,1,0,0,0,184,185,5,10,0,0,185,
		31,1,0,0,0,186,187,5,9,0,0,187,33,1,0,0,0,188,189,5,11,0,0,189,35,1,0,
		0,0,190,191,5,13,0,0,191,37,1,0,0,0,192,193,5,14,0,0,193,39,1,0,0,0,10,
		50,59,112,121,123,135,137,139,149,151
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
