//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/andrew/RiderProjects/adt-solver/RedlogParser/RedTrace.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RedTraceLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, AND=4, OR=5, EQUAL=6, GR=7, LS=8, LEQ=9, NEQ=10, 
		GEQ=11, NCONG=12, BALL=13, NIL=14, PREAMBULA=15, POSTAMBULA=16, ID=17, 
		NUM=18, WS=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "AND", "OR", "EQUAL", "GR", "LS", "LEQ", "NEQ", 
		"GEQ", "NCONG", "BALL", "NIL", "PREAMBULA", "POSTAMBULA", "ID", "NUM", 
		"WS"
	};


	public RedTraceLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RedTraceLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'and'", "'or'", "'equal'", "'greaterp'", "'lessp'", 
		"'leq'", "'neq'", "'geq'", "'ncong'", "'ball'", "'nil'", "'(!*fof (pasf)'", 
		"'t)'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "AND", "OR", "EQUAL", "GR", "LS", "LEQ", "NEQ", 
		"GEQ", "NCONG", "BALL", "NIL", "PREAMBULA", "POSTAMBULA", "ID", "NUM", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RedTrace.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RedTraceLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,151,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
		1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,3,16,120,8,16,1,16,4,
		16,123,8,16,11,16,12,16,124,1,16,3,16,128,8,16,1,16,1,16,1,17,1,17,3,17,
		134,8,17,1,17,1,17,5,17,138,8,17,10,17,12,17,141,9,17,3,17,143,8,17,1,
		18,4,18,146,8,18,11,18,12,18,147,1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
		18,37,19,1,0,4,1,0,97,122,1,0,49,57,1,0,48,57,2,0,9,10,32,32,157,0,1,1,
		0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,45,1,0,0,
		0,9,49,1,0,0,0,11,52,1,0,0,0,13,58,1,0,0,0,15,67,1,0,0,0,17,73,1,0,0,0,
		19,77,1,0,0,0,21,81,1,0,0,0,23,85,1,0,0,0,25,91,1,0,0,0,27,96,1,0,0,0,
		29,100,1,0,0,0,31,114,1,0,0,0,33,119,1,0,0,0,35,142,1,0,0,0,37,145,1,0,
		0,0,39,40,5,40,0,0,40,2,1,0,0,0,41,42,5,41,0,0,42,4,1,0,0,0,43,44,5,46,
		0,0,44,6,1,0,0,0,45,46,5,97,0,0,46,47,5,110,0,0,47,48,5,100,0,0,48,8,1,
		0,0,0,49,50,5,111,0,0,50,51,5,114,0,0,51,10,1,0,0,0,52,53,5,101,0,0,53,
		54,5,113,0,0,54,55,5,117,0,0,55,56,5,97,0,0,56,57,5,108,0,0,57,12,1,0,
		0,0,58,59,5,103,0,0,59,60,5,114,0,0,60,61,5,101,0,0,61,62,5,97,0,0,62,
		63,5,116,0,0,63,64,5,101,0,0,64,65,5,114,0,0,65,66,5,112,0,0,66,14,1,0,
		0,0,67,68,5,108,0,0,68,69,5,101,0,0,69,70,5,115,0,0,70,71,5,115,0,0,71,
		72,5,112,0,0,72,16,1,0,0,0,73,74,5,108,0,0,74,75,5,101,0,0,75,76,5,113,
		0,0,76,18,1,0,0,0,77,78,5,110,0,0,78,79,5,101,0,0,79,80,5,113,0,0,80,20,
		1,0,0,0,81,82,5,103,0,0,82,83,5,101,0,0,83,84,5,113,0,0,84,22,1,0,0,0,
		85,86,5,110,0,0,86,87,5,99,0,0,87,88,5,111,0,0,88,89,5,110,0,0,89,90,5,
		103,0,0,90,24,1,0,0,0,91,92,5,98,0,0,92,93,5,97,0,0,93,94,5,108,0,0,94,
		95,5,108,0,0,95,26,1,0,0,0,96,97,5,110,0,0,97,98,5,105,0,0,98,99,5,108,
		0,0,99,28,1,0,0,0,100,101,5,40,0,0,101,102,5,33,0,0,102,103,5,42,0,0,103,
		104,5,102,0,0,104,105,5,111,0,0,105,106,5,102,0,0,106,107,5,32,0,0,107,
		108,5,40,0,0,108,109,5,112,0,0,109,110,5,97,0,0,110,111,5,115,0,0,111,
		112,5,102,0,0,112,113,5,41,0,0,113,30,1,0,0,0,114,115,5,116,0,0,115,116,
		5,41,0,0,116,32,1,0,0,0,117,118,5,33,0,0,118,120,5,95,0,0,119,117,1,0,
		0,0,119,120,1,0,0,0,120,122,1,0,0,0,121,123,7,0,0,0,122,121,1,0,0,0,123,
		124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,0,126,128,5,
		95,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,3,35,17,
		0,130,34,1,0,0,0,131,143,5,48,0,0,132,134,5,45,0,0,133,132,1,0,0,0,133,
		134,1,0,0,0,134,135,1,0,0,0,135,139,7,1,0,0,136,138,7,2,0,0,137,136,1,
		0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,
		141,139,1,0,0,0,142,131,1,0,0,0,142,133,1,0,0,0,143,36,1,0,0,0,144,146,
		7,3,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,
		0,148,149,1,0,0,0,149,150,6,18,0,0,150,38,1,0,0,0,8,0,119,124,127,133,
		139,142,147,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
